{"id": "0", "qid": "2", "lang": "Python", "code": "def truncate_number(number: float) -> float:\n    _, decimal_value = str(number).split('.')\n    return float(f'.{decimal_value}')\n", "file_path": "/tmp/tmpzbzdsqan/2_0/2_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "2_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.787000000000003, "last_ran_command_idx": 0, "command_runtimes": [25.733], "command_memory": [10031104], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "3", "lang": "Python", "code": "from typing import List\n\n\ndef below_zero(operations: List[int]) -> bool:\n    balance = 0\n\n    for op in operations:\n        balance += op\n        if balance < 0:\n            return True\n\n    return False\n", "file_path": "/tmp/tmpzbzdsqan/3_0/3_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "3_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.854, "last_ran_command_idx": 0, "command_runtimes": [25.81], "command_memory": [9998336], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "0", "lang": "Python", "code": "from typing import List\n\n\ndef has_close_elements(numbers: List[float], threshold: float) -> bool:\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                distance = abs(elem - elem2)\n                if distance < threshold:\n                    return True\n\n    return False\n", "file_path": "/tmp/tmpzbzdsqan/0_0/0_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "0_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.904, "last_ran_command_idx": 0, "command_runtimes": [25.852], "command_memory": [10080256], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "1", "lang": "Python", "code": "from typing import List\n\n\ndef separate_paren_groups(paren_string: str) -> List[str]:\n    result = []\n    current_string = []\n    current_depth = 0\n\n    for c in paren_string:\n        if c == '(':\n            current_depth += 1\n            current_string.append(c)\n        elif c == ')':\n            current_depth -= 1\n            current_string.append(c)\n\n            if current_depth == 0:\n                result.append(''.join(current_string))\n                current_string.clear()\n\n    return result\n", "file_path": "/tmp/tmpzbzdsqan/1_0/1_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "1_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 34.619, "last_ran_command_idx": 0, "command_runtimes": [34.566], "command_memory": [10129408], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "6", "lang": "Python", "code": "from typing import List\n\n\ndef parse_nested_parens(paren_string: str) -> List[int]:\n    def parse_paren_group(s):\n        depth = 0\n        max_depth = 0\n        for c in s:\n            if c == '(':\n                depth += 1\n                max_depth = max(depth, max_depth)\n            else:\n                depth -= 1\n\n        return max_depth\n\n    return [parse_paren_group(x) for x in paren_string.split(' ') if x]\n", "file_path": "/tmp/tmpzbzdsqan/6_0/6_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "6_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.243000000000002, "last_ran_command_idx": 0, "command_runtimes": [28.211], "command_memory": [10035200], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "5", "lang": "Python", "code": "from typing import List\n\n\ndef intersperse(numbers: List[int], delimeter: int) -> List[int]:\n    if not numbers:\n        return []\n\n    result = []\n\n    for n in numbers[:-1]:\n        result.append(n)\n        result.append(delimeter)\n\n    result.append(numbers[-1])\n\n    return result\n", "file_path": "/tmp/tmpzbzdsqan/5_0/5_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "5_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.295, "last_ran_command_idx": 0, "command_runtimes": [28.267], "command_memory": [10289152], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "4", "lang": "Python", "code": "from typing import List\n\n\ndef mean_absolute_deviation(numbers: List[float]) -> float:\n    mean = sum(numbers) / len(numbers)\n    return sum(abs(x - mean) for x in numbers) / len(numbers)\n", "file_path": "/tmp/tmpzbzdsqan/4_0/4_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "4_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 29.314, "last_ran_command_idx": 0, "command_runtimes": [29.285], "command_memory": [10027008], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "7", "lang": "Python", "code": "from typing import List\n\n\ndef filter_by_substring(strings: List[str], substring: str) -> List[str]:\n    return [x for x in strings if substring in x]\n", "file_path": "/tmp/tmpzbzdsqan/7_0/7_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "7_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.451999999999998, "last_ran_command_idx": 0, "command_runtimes": [25.421], "command_memory": [10342400], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "9", "lang": "Python", "code": "from typing import List, Tuple\n\n\ndef rolling_max(numbers: List[int]) -> List[int]:\n    running_max = None\n    result = []\n\n    for n in numbers:\n        if running_max is None:\n            running_max = n\n        else:\n            running_max = max(running_max, n)\n\n        result.append(running_max)\n\n    return result\n", "file_path": "/tmp/tmpzbzdsqan/9_0/9_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "9_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.977, "last_ran_command_idx": 0, "command_runtimes": [26.946], "command_memory": [10313728], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "8", "lang": "Python", "code": "def sum_product(numbers: List[int]) -> List[int]:\n    sum_value = 0\n    prod_value = 1\n\n    for n in numbers:\n        sum_value += n\n        prod_value *= n\n    return [sum_value, prod_value]", "file_path": "/tmp/tmpzbzdsqan/8_0/8_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "8_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.026999999999997, "last_ran_command_idx": 0, "command_runtimes": [26.996], "command_memory": [10170368], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "10", "lang": "Python", "code": "\n\ndef is_palindrome(string: str) -> bool:\n    \"\"\" Test if given string is a palindrome \"\"\"\n    return string == string[::-1]\n\n\ndef make_palindrome(string: str) -> str:\n    if not string:\n        return ''\n\n    beginning_of_suffix = 0\n\n    while not is_palindrome(string[beginning_of_suffix:]):\n        beginning_of_suffix += 1\n\n    return string + string[:beginning_of_suffix][::-1]\n", "file_path": "/tmp/tmpzbzdsqan/10_0/10_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "10_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.057, "last_ran_command_idx": 0, "command_runtimes": [26.027], "command_memory": [10067968], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "11", "lang": "Python", "code": "from typing import List\n\n\ndef string_xor(a: str, b: str) -> str:\n    def xor(i, j):\n        if i == j:\n            return '0'\n        else:\n            return '1'\n\n    return ''.join(xor(x, y) for x, y in zip(a, b))\n", "file_path": "/tmp/tmpzbzdsqan/11_0/11_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "11_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.215, "last_ran_command_idx": 0, "command_runtimes": [24.187], "command_memory": [10104832], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "15", "lang": "Python", "code": "\n\ndef string_sequence(n: int) -> str:\n    return ' '.join([str(x) for x in range(n + 1)])\n", "file_path": "/tmp/tmpzbzdsqan/15_0/15_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "15_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.037, "last_ran_command_idx": 0, "command_runtimes": [25.005], "command_memory": [9977856], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "14", "lang": "Python", "code": "from typing import List\n\n\ndef all_prefixes(string: str) -> List[str]:\n    result = []\n\n    for i in range(len(string)):\n        result.append(string[:i+1])\n    return result\n", "file_path": "/tmp/tmpzbzdsqan/14_0/14_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "14_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.060000000000002, "last_ran_command_idx": 0, "command_runtimes": [28.03], "command_memory": [10059776], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "12", "lang": "Python", "code": "from typing import List, Optional\n\ndef longest(strings: List[str]) -> str:\n    if not strings:\n        return ''\n\n    maxlen = max(len(x) for x in strings)\n    for s in strings:\n        if len(s) == maxlen:\n            return s\n\n", "file_path": "/tmp/tmpzbzdsqan/12_0/12_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "12_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.153000000000002, "last_ran_command_idx": 0, "command_runtimes": [28.124], "command_memory": [10117120], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "13", "lang": "Python", "code": "\n\ndef greatest_common_divisor(a: int, b: int) -> int:\n    while b:\n        a, b = b, a % b\n    return a\n", "file_path": "/tmp/tmpzbzdsqan/13_0/13_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "13_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.254, "last_ran_command_idx": 0, "command_runtimes": [28.225], "command_memory": [10231808], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "17", "lang": "Python", "code": "from typing import List\n\n\ndef parse_music(music_string: str) -> List[int]:\n    note_map = {'o': 4, 'o|': 2, '.|': 1}\n    return [note_map[x] for x in music_string.split(' ') if x]\n", "file_path": "/tmp/tmpzbzdsqan/17_0/17_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "17_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.061999999999998, "last_ran_command_idx": 0, "command_runtimes": [27.029], "command_memory": [10035200], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "19", "lang": "Python", "code": "from typing import List\n\n\ndef sort_numbers(numbers: str) -> str:\n    value_map = {\n        'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    }\n    return ' '.join(sorted([x for x in numbers.split(' ') if x], key=lambda x: value_map[x]))\n", "file_path": "/tmp/tmpzbzdsqan/19_0/19_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "19_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.921, "last_ran_command_idx": 0, "command_runtimes": [26.89], "command_memory": [10227712], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "18", "lang": "Python", "code": "\n\ndef how_many_times(string: str, substring: str) -> int:\n    times = 0\n\n    for i in range(len(string) - len(substring) + 1):\n        if string[i:i+len(substring)] == substring:\n            times += 1\n\n    return times\n", "file_path": "/tmp/tmpzbzdsqan/18_0/18_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "18_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.105, "last_ran_command_idx": 0, "command_runtimes": [27.077], "command_memory": [10235904], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "16", "lang": "Python", "code": "\n\ndef count_distinct_characters(string: str) -> int:\n    return len(set(string.lower()))\n", "file_path": "/tmp/tmpzbzdsqan/16_0/16_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "16_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.237000000000002, "last_ran_command_idx": 0, "command_runtimes": [27.206999999999997], "command_memory": [10035200], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "22", "lang": "Python", "code": "from typing import List, Any\ndef filter_integers(values: List[str]) -> List[int]:\n    integers = []\n    for x in values:\n      if x.isnumeric() and float(x).is_integer():\n        integers.append(int(x))\n    return integers\n", "file_path": "/tmp/tmpzbzdsqan/22_0/22_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "22_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.971, "last_ran_command_idx": 0, "command_runtimes": [26.939999999999998], "command_memory": [10416128], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "20", "lang": "Python", "code": "from typing import List, Tuple\n\n\ndef find_closest_elements(numbers: List[float]) -> List[float]:\n    closest_pair = None\n    distance = None\n\n    for idx, elem in enumerate(numbers):\n        for idx2, elem2 in enumerate(numbers):\n            if idx != idx2:\n                if distance is None:\n                    distance = abs(elem - elem2)\n                    closest_pair = tuple(sorted([elem, elem2]))\n                else:\n                    new_distance = abs(elem - elem2)\n                    if new_distance < distance:\n                        distance = new_distance\n                        closest_pair = tuple(sorted([elem, elem2]))\n\n    return list(closest_pair)", "file_path": "/tmp/tmpzbzdsqan/20_0/20_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "20_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.136, "last_ran_command_idx": 0, "command_runtimes": [27.107], "command_memory": [10108928], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "21", "lang": "Python", "code": "from typing import List\n\n\ndef rescale_to_unit(numbers: List[float]) -> List[float]:\n    min_number = min(numbers)\n    max_number = max(numbers)\n    return [(x - min_number) / (max_number - min_number) for x in numbers]\n", "file_path": "/tmp/tmpzbzdsqan/21_0/21_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "21_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.121, "last_ran_command_idx": 0, "command_runtimes": [27.095000000000002], "command_memory": [10047488], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "23", "lang": "Python", "code": "def get_string_length(s: str) -> int:\n    return len(s)", "file_path": "/tmp/tmpzbzdsqan/23_0/23_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "23_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.576, "last_ran_command_idx": 0, "command_runtimes": [27.549], "command_memory": [10088448], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "27", "lang": "Python", "code": "\n\ndef flip_case(string: str) -> str:\n    return string.swapcase()\n", "file_path": "/tmp/tmpzbzdsqan/27_0/27_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "27_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.908, "last_ran_command_idx": 0, "command_runtimes": [26.879], "command_memory": [9973760], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "24", "lang": "Python", "code": "\n\ndef largest_divisor(n: int) -> int:\n    for i in reversed(range(n)):\n        if n % i == 0:\n            return i\n", "file_path": "/tmp/tmpzbzdsqan/24_0/24_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "24_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.003, "last_ran_command_idx": 0, "command_runtimes": [26.974999999999998], "command_memory": [10055680], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "26", "lang": "Python", "code": "from typing import List\n\n\ndef remove_duplicates(numbers: List[int]) -> List[int]:\n    import collections\n    c = collections.Counter(numbers)\n    return [n for n in numbers if c[n] <= 1]\n", "file_path": "/tmp/tmpzbzdsqan/26_0/26_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "26_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.006, "last_ran_command_idx": 0, "command_runtimes": [26.977], "command_memory": [10350592], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "28", "lang": "Python", "code": "from typing import List\n\n\ndef concatenate(strings: List[str]) -> str:\n    return ''.join(strings)\n", "file_path": "/tmp/tmpzbzdsqan/28_0/28_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "28_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.389, "last_ran_command_idx": 0, "command_runtimes": [26.363], "command_memory": [10002432], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "30", "lang": "Python", "code": "\n\ndef get_positive(l: list):\n    return [e for e in l if e > 0]\n", "file_path": "/tmp/tmpzbzdsqan/30_0/30_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "30_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.686, "last_ran_command_idx": 0, "command_runtimes": [26.65], "command_memory": [10072064], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "31", "lang": "Python", "code": "\n\ndef is_prime(n):\n    if n < 2:\n        return False\n    for k in range(2, n - 1):\n        if n % k == 0:\n            return False\n    return True\n", "file_path": "/tmp/tmpzbzdsqan/31_0/31_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "31_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.512, "last_ran_command_idx": 0, "command_runtimes": [27.477999999999998], "command_memory": [10227712], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "32", "lang": "Python", "code": "import math\n\n\ndef poly(xs: list, x: float):\n    \"\"\"\n    Evaluates polynomial with coefficients xs at point x.\n    return xs[0] + xs[1] * x + xs[1] * x^2 + .... xs[n] * x^n\n    \"\"\"\n    return sum([coeff * math.pow(x, i) for i, coeff in enumerate(xs)])\n\n\ndef find_zero(xs: list):\n    begin, end = -1., 1.\n    while poly(xs, begin) * poly(xs, end) > 0:\n        begin *= 2.0\n        end *= 2.0\n    while end - begin > 1e-10:\n        center = (begin + end) / 2.0\n        if poly(xs, center) * poly(xs, begin) > 0:\n            begin = center\n        else:\n            end = center\n    return begin\n", "file_path": "/tmp/tmpzbzdsqan/32_0/32_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "32_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.070999999999998, "last_ran_command_idx": 0, "command_runtimes": [28.044], "command_memory": [10149888], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "29", "lang": "Python", "code": "from typing import List\n\n\ndef filter_by_prefix(strings: List[str], prefix: str) -> List[str]:\n    return [x for x in strings if x.startswith(prefix)]\n", "file_path": "/tmp/tmpzbzdsqan/29_0/29_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "29_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 34.827999999999996, "last_ran_command_idx": 0, "command_runtimes": [34.785000000000004], "command_memory": [10293248], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "35", "lang": "Python", "code": "\n\ndef max_element(l: list):\n    m = l[0]\n    for e in l:\n        if e > m:\n            m = e\n    return m\n", "file_path": "/tmp/tmpzbzdsqan/35_0/35_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "35_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.041, "last_ran_command_idx": 0, "command_runtimes": [26.012], "command_memory": [10002432], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "34", "lang": "Python", "code": "\n\ndef unique(l: list):\n    return sorted(list(set(l)))\n", "file_path": "/tmp/tmpzbzdsqan/34_0/34_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "34_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.537000000000003, "last_ran_command_idx": 0, "command_runtimes": [26.505000000000003], "command_memory": [10272768], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "33", "lang": "Python", "code": "from typing import List\ndef sort_third(l: List):\n    l = list(l)\n    l[::3] = sorted(l[::3])\n    return list(l)\n", "file_path": "/tmp/tmpzbzdsqan/33_0/33_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "33_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.491000000000003, "last_ran_command_idx": 0, "command_runtimes": [27.454], "command_memory": [10129408], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "36", "lang": "Python", "code": "\n\ndef fizz_buzz(n: int):\n    ns = []\n    for i in range(n):\n        if i % 11 == 0 or i % 13 == 0:\n            ns.append(i)\n    s = ''.join(list(map(str, ns)))\n    ans = 0\n    for c in s:\n        ans += (c == '7')\n    return ans\n", "file_path": "/tmp/tmpzbzdsqan/36_0/36_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "36_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 44.36, "last_ran_command_idx": 0, "command_runtimes": [44.321], "command_memory": [11935744], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "37", "lang": "Python", "code": "\n\ndef sort_even(l: list):\n    evens = l[::2]\n    odds = l[1::2]\n    evens.sort()\n    ans = []\n    for e, o in zip(evens, odds):\n        ans.extend([e, o])\n    if len(evens) > len(odds):\n        ans.append(evens[-1])\n    return ans\n", "file_path": "/tmp/tmpzbzdsqan/37_0/37_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "37_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.651, "last_ran_command_idx": 0, "command_runtimes": [26.619], "command_memory": [10108928], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "40", "lang": "Python", "code": "\n\ndef triples_sum_to_zero(l: list):\n    for i in range(len(l)):\n        for j in range(i + 1, len(l)):\n            for k in range(j + 1, len(l)):\n                if l[i] + l[j] + l[k] == 0:\n                    return True\n    return False\n", "file_path": "/tmp/tmpzbzdsqan/40_0/40_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "40_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.487000000000002, "last_ran_command_idx": 0, "command_runtimes": [26.451999999999998], "command_memory": [10088448], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "39", "lang": "Python", "code": "\n\ndef prime_fib(n: int):\n    import math\n\n    def is_prime(p):\n        if p < 2:\n            return False\n        for k in range(2, min(int(math.sqrt(p)) + 1, p - 1)):\n            if p % k == 0:\n                return False\n        return True\n    f = [0, 1]\n    while True:\n        f.append(f[-1] + f[-2])\n        if is_prime(f[-1]):\n            n -= 1\n        if n == 0:\n            return f[-1]\n", "file_path": "/tmp/tmpzbzdsqan/39_0/39_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "39_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.458000000000002, "last_ran_command_idx": 0, "command_runtimes": [28.427999999999997], "command_memory": [10170368], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "41", "lang": "Python", "code": "\n\ndef car_race_collision(n: int):\n    return n**2\n", "file_path": "/tmp/tmpzbzdsqan/41_0/41_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "41_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.832, "last_ran_command_idx": 0, "command_runtimes": [26.8], "command_memory": [10063872], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "42", "lang": "Python", "code": "\n\ndef incr_list(l: list):\n    return [(e + 1) for e in l]\n", "file_path": "/tmp/tmpzbzdsqan/42_0/42_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "42_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.965, "last_ran_command_idx": 0, "command_runtimes": [26.894000000000002], "command_memory": [10366976], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "43", "lang": "Python", "code": "\n\ndef pairs_sum_to_zero(l):\n    for i, l1 in enumerate(l):\n        for j in range(i + 1, len(l)):\n            if l1 + l[j] == 0:\n                return True\n    return False\n", "file_path": "/tmp/tmpzbzdsqan/43_0/43_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "43_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.725, "last_ran_command_idx": 0, "command_runtimes": [27.648], "command_memory": [10223616], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "44", "lang": "Python", "code": "\n\ndef change_base(x: int, base: int):\n    ret = \"\"\n    while x > 0:\n        ret = str(x % base) + ret\n        x //= base\n    return ret\n", "file_path": "/tmp/tmpzbzdsqan/44_0/44_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "44_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.967, "last_ran_command_idx": 0, "command_runtimes": [28.9], "command_memory": [10330112], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "46", "lang": "Python", "code": "\n\ndef fib4(n: int):\n    results = [0, 0, 2, 0]\n    if n < 4:\n        return results[n]\n\n    for _ in range(4, n + 1):\n        results.append(results[-1] + results[-2] + results[-3] + results[-4])\n        results.pop(0)\n\n    return results[-1]\n", "file_path": "/tmp/tmpzbzdsqan/46_0/46_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "46_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 29.325, "last_ran_command_idx": 0, "command_runtimes": [29.265], "command_memory": [10006528], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "47", "lang": "Python", "code": "\n\ndef median(l: list):\n    l = sorted(l)\n    if len(l) % 2 == 1:\n        return l[len(l) // 2]\n    else:\n        return (l[len(l) // 2 - 1] + l[len(l) // 2]) / 2.0\n", "file_path": "/tmp/tmpzbzdsqan/47_0/47_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "47_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 29.946, "last_ran_command_idx": 0, "command_runtimes": [29.904], "command_memory": [10076160], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "48", "lang": "Python", "code": "\n\ndef is_palindrome(text: str):\n    for i in range(len(text)):\n        if text[i] != text[len(text) - 1 - i]:\n            return False\n    return True\n", "file_path": "/tmp/tmpzbzdsqan/48_0/48_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "48_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.984, "last_ran_command_idx": 0, "command_runtimes": [26.946], "command_memory": [10149888], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "45", "lang": "Python", "code": "\n\ndef triangle_area(a, h):\n    return a * h / 2.0\n", "file_path": "/tmp/tmpzbzdsqan/45_0/45_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "45_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 37.602, "last_ran_command_idx": 0, "command_runtimes": [37.565], "command_memory": [10309632], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "49", "lang": "Python", "code": "\n\ndef modp(n: int, p: int):\n    ret = 1\n    for i in range(n):\n        ret = (2 * ret) % p\n    return ret\n", "file_path": "/tmp/tmpzbzdsqan/49_0/49_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "49_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.483, "last_ran_command_idx": 0, "command_runtimes": [27.446], "command_memory": [10100736], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "51", "lang": "Python", "code": "\n\ndef remove_vowels(text):\n    return \"\".join([s for s in text if s.lower() not in [\"a\", \"e\", \"i\", \"o\", \"u\"]])\n", "file_path": "/tmp/tmpzbzdsqan/51_0/51_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "51_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.316, "last_ran_command_idx": 0, "command_runtimes": [27.279999999999998], "command_memory": [10055680], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "52", "lang": "Python", "code": "\n\ndef below_threshold(l: list, t: int):\n    for e in l:\n        if e >= t:\n            return False\n    return True\n", "file_path": "/tmp/tmpzbzdsqan/52_0/52_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "52_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.293000000000003, "last_ran_command_idx": 0, "command_runtimes": [27.259999999999998], "command_memory": [10104832], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "53", "lang": "Python", "code": "\n\ndef add(x: int, y: int):\n    return x + y\n", "file_path": "/tmp/tmpzbzdsqan/53_0/53_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "53_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\nTEST-13...PASSED\nTEST-14...PASSED\nTEST-15...PASSED\nTEST-16...PASSED\nTEST-17...PASSED\nTEST-18...PASSED\nTEST-19...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.049, "last_ran_command_idx": 0, "command_runtimes": [25.014000000000003], "command_memory": [10379264], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "54", "lang": "Python", "code": "\n\ndef same_chars(s0: str, s1: str):\n    return set(s0) == set(s1)\n", "file_path": "/tmp/tmpzbzdsqan/54_0/54_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "54_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.633000000000003, "last_ran_command_idx": 0, "command_runtimes": [27.601], "command_memory": [10170368], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "56", "lang": "Python", "code": "\n\ndef correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"<\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "file_path": "/tmp/tmpzbzdsqan/56_0/56_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "56_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.041, "last_ran_command_idx": 0, "command_runtimes": [26.999], "command_memory": [10231808], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "57", "lang": "Python", "code": "\n\ndef monotonic(l: list):\n    if l == sorted(l) or l == sorted(l, reverse=True):\n        return True\n    return False\n", "file_path": "/tmp/tmpzbzdsqan/57_0/57_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "57_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.398, "last_ran_command_idx": 0, "command_runtimes": [25.37], "command_memory": [10158080], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "55", "lang": "Python", "code": "\n\ndef fib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 1\n    return fib(n - 1) + fib(n - 2)\n", "file_path": "/tmp/tmpzbzdsqan/55_0/55_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "55_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 36.07599999999999, "last_ran_command_idx": 0, "command_runtimes": [36.043], "command_memory": [10076160], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "58", "lang": "Python", "code": "\n\ndef common(l1: list, l2: list):\n    ret = set()\n    for e1 in l1:\n        for e2 in l2:\n            if e1 == e2:\n                ret.add(e1)\n    return sorted(list(ret))\n", "file_path": "/tmp/tmpzbzdsqan/58_0/58_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "58_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.924999999999997, "last_ran_command_idx": 0, "command_runtimes": [27.891], "command_memory": [10178560], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "59", "lang": "Python", "code": "\n\ndef largest_prime_factor(n: int):\n    def is_prime(k):\n        if k < 2:\n            return False\n        for i in range(2, k - 1):\n            if k % i == 0:\n                return False\n        return True\n    largest = 1\n    for j in range(2, n + 1):\n        if n % j == 0 and is_prime(j):\n            largest = max(largest, j)\n    return largest\n", "file_path": "/tmp/tmpzbzdsqan/59_0/59_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "59_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.099, "last_ran_command_idx": 0, "command_runtimes": [28.065], "command_memory": [10100736], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "60", "lang": "Python", "code": "\n\ndef sum_to_n(n: int):\n    return sum(range(n + 1))\n", "file_path": "/tmp/tmpzbzdsqan/60_0/60_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "60_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.213, "last_ran_command_idx": 0, "command_runtimes": [27.174], "command_memory": [10059776], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "61", "lang": "Python", "code": "\n\ndef correct_bracketing(brackets: str):\n    depth = 0\n    for b in brackets:\n        if b == \"(\":\n            depth += 1\n        else:\n            depth -= 1\n        if depth < 0:\n            return False\n    return depth == 0\n", "file_path": "/tmp/tmpzbzdsqan/61_0/61_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "61_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.381, "last_ran_command_idx": 0, "command_runtimes": [26.348], "command_memory": [10428416], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "64", "lang": "Python", "code": "\nFIX = \"\"\"\nAdd more test cases.\n\"\"\"\n\ndef vowels_count(s):\n    vowels = \"aeiouAEIOU\"\n    n_vowels = sum(c in vowels for c in s)\n    if s[-1] == 'y' or s[-1] == 'Y':\n        n_vowels += 1\n    return n_vowels\n", "file_path": "/tmp/tmpzbzdsqan/64_0/64_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "64_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.378, "last_ran_command_idx": 0, "command_runtimes": [28.337], "command_memory": [10113024], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "63", "lang": "Python", "code": "\n\ndef fibfib(n: int):\n    if n == 0:\n        return 0\n    if n == 1:\n        return 0\n    if n == 2:\n        return 1\n    return fibfib(n - 1) + fibfib(n - 2) + fibfib(n - 3)\n", "file_path": "/tmp/tmpzbzdsqan/63_0/63_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "63_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.607, "last_ran_command_idx": 0, "command_runtimes": [28.57], "command_memory": [10334208], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "65", "lang": "Python", "code": "\ndef circular_shift(x, shift):\n    s = str(x)\n    if shift > len(s):\n        return s[::-1]\n    else:\n        return s[len(s) - shift:] + s[:len(s) - shift]\n", "file_path": "/tmp/tmpzbzdsqan/65_0/65_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "65_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.864, "last_ran_command_idx": 0, "command_runtimes": [24.825], "command_memory": [10047488], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "62", "lang": "Python", "code": "\n\ndef derivative(xs: list):\n    return [(i * x) for i, x in enumerate(xs)][1:]\n", "file_path": "/tmp/tmpzbzdsqan/62_0/62_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "62_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 36.208999999999996, "last_ran_command_idx": 0, "command_runtimes": [36.18], "command_memory": [10285056], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "66", "lang": "Python", "code": "\ndef digit_sum(s):\n    if s == \"\": return 0\n    return sum(ord(char) if char.isupper() else 0 for char in s)\n", "file_path": "/tmp/tmpzbzdsqan/66_0/66_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "66_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.136, "last_ran_command_idx": 0, "command_runtimes": [26.103], "command_memory": [10080256], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "67", "lang": "Python", "code": "\ndef fruit_distribution(s,n):\n    lis = list()\n    for i in s.split(' '):\n        if i.isdigit():\n            lis.append(int(i))\n    return n - sum(lis)\n", "file_path": "/tmp/tmpzbzdsqan/67_0/67_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "67_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.324, "last_ran_command_idx": 0, "command_runtimes": [26.290999999999997], "command_memory": [10080256], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "68", "lang": "Python", "code": "\ndef pluck(arr):\n    if(len(arr) == 0): return []\n    evens = list(filter(lambda x: x%2 == 0, arr))\n    if(evens == []): return []\n    return [min(evens), arr.index(min(evens))]\n", "file_path": "/tmp/tmpzbzdsqan/68_0/68_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "68_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.529, "last_ran_command_idx": 0, "command_runtimes": [24.5], "command_memory": [10104832], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "69", "lang": "Python", "code": "\ndef search(lst):\n    frq = [0] * (max(lst) + 1)\n    for i in lst:\n        frq[i] += 1;\n\n    ans = -1\n    for i in range(1, len(frq)):\n        if frq[i] >= i:\n            ans = i\n    \n    return ans\n", "file_path": "/tmp/tmpzbzdsqan/69_0/69_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "69_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\nTEST-13...PASSED\nTEST-14...PASSED\nTEST-15...PASSED\nTEST-16...PASSED\nTEST-17...PASSED\nTEST-18...PASSED\nTEST-19...PASSED\nTEST-20...PASSED\nTEST-21...PASSED\nTEST-22...PASSED\nTEST-23...PASSED\nTEST-24...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.944000000000003, "last_ran_command_idx": 0, "command_runtimes": [24.913999999999998], "command_memory": [10448896], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "71", "lang": "Python", "code": "\ndef triangle_area(a, b, c):\n    if a + b <= c or a + c <= b or b + c <= a:\n        return -1 \n    s = (a + b + c)/2    \n    area = (s * (s - a) * (s - b) * (s - c)) ** 0.5\n    area = round(area, 2)\n    return area\n", "file_path": "/tmp/tmpzbzdsqan/71_0/71_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "71_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.198, "last_ran_command_idx": 0, "command_runtimes": [26.166999999999998], "command_memory": [10162176], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "72", "lang": "Python", "code": "\ndef will_it_fly(q,w):\n    if sum(q) > w:\n        return False\n\n    i, j = 0, len(q)-1\n    while i<j:\n        if q[i] != q[j]:\n            return False\n        i+=1\n        j-=1\n    return True\n", "file_path": "/tmp/tmpzbzdsqan/72_0/72_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "72_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.595, "last_ran_command_idx": 0, "command_runtimes": [24.564], "command_memory": [10055680], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "70", "lang": "Python", "code": "\ndef strange_sort_list(lst):\n    res, switch = [], True\n    while lst:\n        res.append(min(lst) if switch else max(lst))\n        lst.remove(res[-1])\n        switch = not switch\n    return res\n", "file_path": "/tmp/tmpzbzdsqan/70_0/70_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "70_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.628, "last_ran_command_idx": 0, "command_runtimes": [26.598], "command_memory": [10268672], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "73", "lang": "Python", "code": "\ndef smallest_change(arr):\n    ans = 0\n    for i in range(len(arr) // 2):\n        if arr[i] != arr[len(arr) - i - 1]:\n            ans += 1\n    return ans\n", "file_path": "/tmp/tmpzbzdsqan/73_0/73_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "73_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 23.947, "last_ran_command_idx": 0, "command_runtimes": [23.919], "command_memory": [10305536], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "76", "lang": "Python", "code": "\ndef is_simple_power(x, n):\n    if (n == 1): \n        return (x == 1) \n    power = 1\n    while (power < x): \n        power = power * n \n    return (power == x) \n", "file_path": "/tmp/tmpzbzdsqan/76_0/76_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "76_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.911, "last_ran_command_idx": 0, "command_runtimes": [26.881999999999998], "command_memory": [10235904], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "74", "lang": "Python", "code": "\ndef total_match(lst1, lst2):\n    l1 = 0\n    for st in lst1:\n        l1 += len(st)\n    \n    l2 = 0\n    for st in lst2:\n        l2 += len(st)\n    \n    if l1 <= l2:\n        return lst1\n    else:\n        return lst2\n", "file_path": "/tmp/tmpzbzdsqan/74_0/74_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "74_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.192, "last_ran_command_idx": 0, "command_runtimes": [27.154999999999998], "command_memory": [10211328], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "77", "lang": "Python", "code": "\ndef iscube(a):\n    a = abs(a)\n    return int(round(a ** (1. / 3))) ** 3 == a\n", "file_path": "/tmp/tmpzbzdsqan/77_0/77_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "77_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 32.64, "last_ran_command_idx": 0, "command_runtimes": [32.611000000000004], "command_memory": [10108928], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "79", "lang": "Python", "code": "\ndef decimal_to_binary(decimal):\n    return \"db\" + bin(decimal)[2:] + \"db\"\n", "file_path": "/tmp/tmpzbzdsqan/79_0/79_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "79_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.608, "last_ran_command_idx": 0, "command_runtimes": [25.58], "command_memory": [10190848], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "78", "lang": "Python", "code": "\ndef hex_key(num):\n    primes = ('2', '3', '5', '7', 'B', 'D')\n    total = 0\n    for i in range(0, len(num)):\n        if num[i] in primes:\n            total += 1\n    return total\n", "file_path": "/tmp/tmpzbzdsqan/78_0/78_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "78_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.704, "last_ran_command_idx": 0, "command_runtimes": [25.678], "command_memory": [10092544], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "80", "lang": "Python", "code": "\ndef is_happy(s):\n    if len(s) < 3:\n      return False\n\n    for i in range(len(s) - 2):\n      \n      if s[i] == s[i+1] or s[i+1] == s[i+2] or s[i] == s[i+2]:\n        return False\n    return True\n", "file_path": "/tmp/tmpzbzdsqan/80_0/80_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "80_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.320999999999998, "last_ran_command_idx": 0, "command_runtimes": [24.288], "command_memory": [10162176], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "82", "lang": "Python", "code": "\ndef prime_length(string):\n    l = len(string)\n    if l == 0 or l == 1:\n        return False\n    for i in range(2, l):\n        if l % i == 0:\n            return False\n    return True\n", "file_path": "/tmp/tmpzbzdsqan/82_0/82_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "82_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\nTEST-13...PASSED\nTEST-14...PASSED\nTEST-15...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.035, "last_ran_command_idx": 0, "command_runtimes": [24.005], "command_memory": [10231808], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "81", "lang": "Python", "code": "\ndef numerical_letter_grade(grades):\n\n   \n    letter_grade = []\n    for gpa in grades:\n        if gpa == 4.0:\n            letter_grade.append(\"A+\")\n        elif gpa > 3.7:\n            letter_grade.append(\"A\")\n        elif gpa > 3.3:\n            letter_grade.append(\"A-\")\n        elif gpa > 3.0:\n            letter_grade.append(\"B+\")\n        elif gpa > 2.7:\n            letter_grade.append(\"B\")\n        elif gpa > 2.3:\n            letter_grade.append(\"B-\")\n        elif gpa > 2.0:\n            letter_grade.append(\"C+\")\n        elif gpa > 1.7:\n            letter_grade.append(\"C\")\n        elif gpa > 1.3:\n            letter_grade.append(\"C-\")\n        elif gpa > 1.0:\n            letter_grade.append(\"D+\")\n        elif gpa > 0.7:\n            letter_grade.append(\"D\")\n        elif gpa > 0.0:\n            letter_grade.append(\"D-\")\n        else:\n            letter_grade.append(\"E\")\n    return letter_grade\n", "file_path": "/tmp/tmpzbzdsqan/81_0/81_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "81_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.192, "last_ran_command_idx": 0, "command_runtimes": [25.146], "command_memory": [10256384], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "83", "lang": "Python", "code": "\ndef starts_one_ends(n):\n    if n == 1: return 1\n    return 18 * (10 ** (n - 2))\n", "file_path": "/tmp/tmpzbzdsqan/83_0/83_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "83_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.074, "last_ran_command_idx": 0, "command_runtimes": [24.028000000000002], "command_memory": [10178560], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "84", "lang": "Python", "code": "\ndef solve(N):\n    return bin(sum(int(i) for i in str(N)))[2:]\n", "file_path": "/tmp/tmpzbzdsqan/84_0/84_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "84_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.702, "last_ran_command_idx": 0, "command_runtimes": [24.673000000000002], "command_memory": [10063872], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "85", "lang": "Python", "code": "\ndef add(lst):\n    return sum([lst[i] for i in range(1, len(lst), 2) if lst[i]%2 == 0])\n", "file_path": "/tmp/tmpzbzdsqan/85_0/85_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "85_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 23.916, "last_ran_command_idx": 0, "command_runtimes": [23.885], "command_memory": [10174464], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "86", "lang": "Python", "code": "\ndef anti_shuffle(s):\n    return ' '.join([''.join(sorted(list(i))) for i in s.split(' ')])\n", "file_path": "/tmp/tmpzbzdsqan/86_0/86_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "86_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.169, "last_ran_command_idx": 0, "command_runtimes": [25.121000000000002], "command_memory": [10203136], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "88", "lang": "Python", "code": "\ndef sort_array(array):\n    return [] if len(array) == 0 else sorted(array, reverse= (array[0]+array[-1]) % 2 == 0) \n", "file_path": "/tmp/tmpzbzdsqan/88_0/88_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "88_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.897, "last_ran_command_idx": 0, "command_runtimes": [24.858999999999998], "command_memory": [10145792], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "87", "lang": "Python", "code": "def get_row(lst, x):\n    coords = [[i, j] for i in range(len(lst)) for j in range(len(lst[i])) if lst[i][j] == x]\n    return sorted(sorted(coords, key=lambda x: x[1], reverse=True), key=lambda x: x[0])\n", "file_path": "/tmp/tmpzbzdsqan/87_0/87_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "87_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.911, "last_ran_command_idx": 0, "command_runtimes": [25.878], "command_memory": [10452992], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "89", "lang": "Python", "code": "\ndef encrypt(s):\n    d = 'abcdefghijklmnopqrstuvwxyz'\n    out = ''\n    for c in s:\n        if c in d:\n            out += d[(d.index(c)+2*2) % 26]\n        else:\n            out += c\n    return out\n", "file_path": "/tmp/tmpzbzdsqan/89_0/89_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "89_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.378999999999998, "last_ran_command_idx": 0, "command_runtimes": [25.346], "command_memory": [10190848], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "92", "lang": "Python", "code": "def any_int(x, y, z):\n    if x.is_integer() and y.is_integer() and z.is_integer():\n        if (x+y==z) or (x+z==y) or (y+z==x):\n            return True\n        return False\n    return False", "file_path": "/tmp/tmpzbzdsqan/92_0/92_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "92_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.563000000000002, "last_ran_command_idx": 0, "command_runtimes": [24.532999999999998], "command_memory": [10268672], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "90", "lang": "Python", "code": "def next_smallest(lst):\n    lst = sorted(set(lst))\n    return '' if len(lst) < 2 else str(lst[1])", "file_path": "/tmp/tmpzbzdsqan/90_0/90_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "90_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 36.233000000000004, "last_ran_command_idx": 0, "command_runtimes": [36.202], "command_memory": [10047488], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "91", "lang": "Python", "code": "\ndef is_bored(S):\n    import re\n    sentences = re.split(r'[.?!]\\s*', S)\n    return sum(sentence[0:2] == 'I ' for sentence in sentences)\n", "file_path": "/tmp/tmpzbzdsqan/91_0/91_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "91_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 36.13, "last_ran_command_idx": 0, "command_runtimes": [36.1], "command_memory": [10051584], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "93", "lang": "Python", "code": "\ndef encode(message):\n    vowels = \"aeiouAEIOU\"\n    vowels_replace = dict([(i, chr(ord(i) + 2)) for i in vowels])\n    message = message.swapcase()\n    return ''.join([vowels_replace[i] if i in vowels else i for i in message])\n", "file_path": "/tmp/tmpzbzdsqan/93_0/93_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "93_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.458, "last_ran_command_idx": 0, "command_runtimes": [27.427], "command_memory": [10145792], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "94", "lang": "Python", "code": "\n\ndef skjkasdkd(lst):\n    def isPrime(n):\n        for i in range(2,int(n**0.5)+1):\n            if n%i==0:\n                return False\n\n        return True\n    maxx = 0\n    i = 0\n    while i < len(lst):\n        if(lst[i] > maxx and isPrime(lst[i])):\n            maxx = lst[i]\n        i+=1\n    result = sum(int(digit) for digit in str(maxx))\n    return result\n\n", "file_path": "/tmp/tmpzbzdsqan/94_0/94_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "94_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.545, "last_ran_command_idx": 0, "command_runtimes": [25.516000000000002], "command_memory": [10153984], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "95", "lang": "Python", "code": "\ndef check_dict_case(dict):\n    if len(dict.keys()) == 0:\n        return False\n    else:\n        state = \"start\"\n        for key in dict.keys():\n\n            if isinstance(key, str) == False:\n                state = \"mixed\"\n                break\n            if state == \"start\":\n                if key.isupper():\n                    state = \"upper\"\n                elif key.islower():\n                    state = \"lower\"\n                else:\n                    break\n            elif (state == \"upper\" and not key.isupper()) or (state == \"lower\" and not key.islower()):\n                    state = \"mixed\"\n                    break\n            else:\n                break\n        return state == \"upper\" or state == \"lower\" \n", "file_path": "/tmp/tmpzbzdsqan/95_0/95_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "95_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.16, "last_ran_command_idx": 0, "command_runtimes": [26.128999999999998], "command_memory": [10166272], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "96", "lang": "Python", "code": "\ndef count_up_to(n):\n    primes = []\n    for i in range(2, n):\n        is_prime = True\n        for j in range(2, i):\n            if i % j == 0:\n                is_prime = False\n                break\n        if is_prime:\n            primes.append(i)\n    return primes\n\n", "file_path": "/tmp/tmpzbzdsqan/96_0/96_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "96_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.151999999999997, "last_ran_command_idx": 0, "command_runtimes": [27.119999999999997], "command_memory": [10117120], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "98", "lang": "Python", "code": "\ndef count_upper(s):\n    count = 0\n    for i in range(0,len(s),2):\n        if s[i] in \"AEIOU\":\n            count += 1\n    return count\n", "file_path": "/tmp/tmpzbzdsqan/98_0/98_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "98_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.845, "last_ran_command_idx": 0, "command_runtimes": [24.815], "command_memory": [10039296], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "97", "lang": "Python", "code": "\ndef multiply(a, b):\n    return abs(a % 10) * abs(b % 10)\n", "file_path": "/tmp/tmpzbzdsqan/97_0/97_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "97_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.655, "last_ran_command_idx": 0, "command_runtimes": [25.626], "command_memory": [10088448], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "99", "lang": "Python", "code": "\ndef closest_integer(value):\n    from math import floor, ceil\n\n    if value.count('.') == 1:\n        # remove trailing zeros\n        while (value[-1] == '0'):\n            value = value[:-1]\n\n    num = float(value)\n    if value[-2:] == '.5':\n        if num > 0:\n            res = ceil(num)\n        else:\n            res = floor(num)\n    elif len(value) > 0:\n        res = int(round(num))\n    else:\n        res = 0\n\n    return res\n\n", "file_path": "/tmp/tmpzbzdsqan/99_0/99_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "99_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.661, "last_ran_command_idx": 0, "command_runtimes": [26.629], "command_memory": [10211328], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "101", "lang": "Python", "code": "\ndef words_string(s):\n    if not s:\n        return []\n\n    s_list = []\n\n    for letter in s:\n        if letter == ',':\n            s_list.append(' ')\n        else:\n            s_list.append(letter)\n\n    s_list = \"\".join(s_list)\n    return s_list.split()\n", "file_path": "/tmp/tmpzbzdsqan/101_0/101_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "101_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.360000000000003, "last_ran_command_idx": 0, "command_runtimes": [26.33], "command_memory": [10137600], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "100", "lang": "Python", "code": "\ndef make_a_pile(n):\n    return [n + 2*i for i in range(n)]\n", "file_path": "/tmp/tmpzbzdsqan/100_0/100_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "100_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.549, "last_ran_command_idx": 0, "command_runtimes": [26.516000000000002], "command_memory": [10100736], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "102", "lang": "Python", "code": "\ndef choose_num(x, y):\n    if x > y:\n        return -1\n    if y % 2 == 0:\n        return y\n    if x == y:\n        return -1\n    return y - 1\n", "file_path": "/tmp/tmpzbzdsqan/102_0/102_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "102_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.153, "last_ran_command_idx": 0, "command_runtimes": [26.123], "command_memory": [10194944], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "104", "lang": "Python", "code": "\ndef unique_digits(x):\n    odd_digit_elements = []\n    for i in x:\n        if all (int(c) % 2 == 1 for c in str(i)):\n            odd_digit_elements.append(i)\n    return sorted(odd_digit_elements)\n", "file_path": "/tmp/tmpzbzdsqan/104_0/104_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "104_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.812, "last_ran_command_idx": 0, "command_runtimes": [25.782], "command_memory": [10088448], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "103", "lang": "Python", "code": "def rounded_avg(n, m):\n    if m < n:\n        return \"-1\"\n    summation = 0\n    for i in range(n, m+1):\n        summation += i\n    return bin(round(summation/(m - n + 1)))\n", "file_path": "/tmp/tmpzbzdsqan/103_0/103_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "103_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.057, "last_ran_command_idx": 0, "command_runtimes": [26.029], "command_memory": [10231808], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "75", "lang": "Python", "code": "\ndef is_multiply_prime(a):\n    def is_prime(n):\n        for j in range(2,n):\n            if n%j == 0:\n                return False\n        return True\n\n    for i in range(2,101):\n        if not is_prime(i): continue\n        for j in range(2,101):\n            if not is_prime(j): continue\n            for k in range(2,101):\n                if not is_prime(k): continue\n                if i*j*k == a: return True\n    return False\n", "file_path": "/tmp/tmpzbzdsqan/75_0/75_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "75_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 290.785, "last_ran_command_idx": 0, "command_runtimes": [290.754], "command_memory": [10211328], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "105", "lang": "Python", "code": "\ndef by_length(arr):\n    dic = {\n        1: \"One\",\n        2: \"Two\",\n        3: \"Three\",\n        4: \"Four\",\n        5: \"Five\",\n        6: \"Six\",\n        7: \"Seven\",\n        8: \"Eight\",\n        9: \"Nine\",\n    }\n    sorted_arr = sorted(arr, reverse=True)\n    new_arr = []\n    for var in sorted_arr:\n        try:\n            new_arr.append(dic[var])\n        except:\n            pass\n    return new_arr\n", "file_path": "/tmp/tmpzbzdsqan/105_0/105_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "105_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.158, "last_ran_command_idx": 0, "command_runtimes": [26.128999999999998], "command_memory": [10158080], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "107", "lang": "Python", "code": "def even_odd_palindrome(n):\n    def is_palindrome(n):\n        return str(n) == str(n)[::-1]\n\n    even_palindrome_count = 0\n    odd_palindrome_count = 0\n\n    for i in range(1, n+1):\n        if i%2 == 1 and is_palindrome(i):\n                odd_palindrome_count += 1\n        elif i%2 == 0 and is_palindrome(i):\n            even_palindrome_count += 1\n    return [even_palindrome_count, odd_palindrome_count]", "file_path": "/tmp/tmpzbzdsqan/107_0/107_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "107_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.787000000000003, "last_ran_command_idx": 0, "command_runtimes": [25.755], "command_memory": [10301440], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "106", "lang": "Python", "code": "\ndef f(n):\n    ret = []\n    for i in range(1,n+1):\n        if i%2 == 0:\n            x = 1\n            for j in range(1,i+1): x *= j\n            ret += [x]\n        else:\n            x = 0\n            for j in range(1,i+1): x += j\n            ret += [x]\n    return ret\n", "file_path": "/tmp/tmpzbzdsqan/106_0/106_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "106_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.974, "last_ran_command_idx": 0, "command_runtimes": [25.943], "command_memory": [10170368], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "108", "lang": "Python", "code": "\ndef count_nums(arr):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return len(list(filter(lambda x: x > 0, [digits_sum(i) for i in arr])))\n", "file_path": "/tmp/tmpzbzdsqan/108_0/108_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "108_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.610999999999997, "last_ran_command_idx": 0, "command_runtimes": [25.581], "command_memory": [10412032], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "109", "lang": "Python", "code": "\ndef move_one_ball(arr):\n    if len(arr)==0:\n      return True\n    sorted_array=sorted(arr)\n    my_arr=[]\n    \n    min_value=min(arr)\n    min_index=arr.index(min_value)\n    my_arr=arr[min_index:]+arr[0:min_index]\n    for i in range(len(arr)):\n      if my_arr[i]!=sorted_array[i]:\n        return False\n    return True\n", "file_path": "/tmp/tmpzbzdsqan/109_0/109_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "109_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.093, "last_ran_command_idx": 0, "command_runtimes": [26.061999999999998], "command_memory": [10100736], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "110", "lang": "Python", "code": "\ndef exchange(lst1, lst2):\n    odd = 0\n    even = 0\n    for i in lst1:\n        if i%2 == 1:\n            odd += 1\n    for i in lst2:\n        if i%2 == 0:\n            even += 1\n    if even >= odd:\n        return \"YES\"\n    return \"NO\"\n            \n", "file_path": "/tmp/tmpzbzdsqan/110_0/110_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "110_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.887, "last_ran_command_idx": 0, "command_runtimes": [25.854], "command_memory": [10293248], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "111", "lang": "Python", "code": "\ndef histogram(test):\n    dict1={}\n    list1=test.split(\" \")\n    t=0\n\n    for i in list1:\n        if(list1.count(i)>t) and i!='':\n            t=list1.count(i)\n    if t>0:\n        for i in list1:\n            if(list1.count(i)==t):\n                \n                dict1[i]=t\n    return dict1\n", "file_path": "/tmp/tmpzbzdsqan/111_0/111_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "111_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.064, "last_ran_command_idx": 0, "command_runtimes": [26.032], "command_memory": [10371072], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "113", "lang": "Python", "code": "\ndef odd_count(lst):\n    res = []\n    for arr in lst:\n        n = sum(int(d)%2==1 for d in arr)\n        res.append(\"the number of odd elements \" + str(n) + \"n the str\"+ str(n) +\"ng \"+ str(n) +\" of the \"+ str(n) +\"nput.\")\n    return res\n", "file_path": "/tmp/tmpzbzdsqan/113_0/113_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "113_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.886, "last_ran_command_idx": 0, "command_runtimes": [24.854000000000003], "command_memory": [10076160], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "112", "lang": "Python", "code": "def reverse_delete(s,c):\n    s = ''.join([char for char in s if char not in c])\n    return [s,str(s[::-1] == s)]\n", "file_path": "/tmp/tmpzbzdsqan/112_0/112_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "112_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 35.265, "last_ran_command_idx": 0, "command_runtimes": [35.213], "command_memory": [10178560], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "114", "lang": "Python", "code": "\ndef min_sub_array_sum(nums):\n    max_sum = 0\n    s = 0\n    for num in nums:\n        s += -num\n        if (s < 0):\n            s = 0\n        max_sum = max(s, max_sum)\n    if max_sum == 0:\n        max_sum = max(-i for i in nums)\n    min_sum = -max_sum\n    return min_sum\n", "file_path": "/tmp/tmpzbzdsqan/114_0/114_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "114_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.47, "last_ran_command_idx": 0, "command_runtimes": [25.410999999999998], "command_memory": [10268672], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "115", "lang": "Python", "code": "\ndef max_fill(grid, capacity):\n    import math\n    return sum([math.ceil(sum(arr)/capacity) for arr in grid])\n", "file_path": "/tmp/tmpzbzdsqan/115_0/115_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "115_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.195, "last_ran_command_idx": 0, "command_runtimes": [25.144], "command_memory": [10113024], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "116", "lang": "Python", "code": "\ndef sort_array(arr):\n    return sorted(sorted(arr), key=lambda x: bin(x)[2:].count('1'))\n", "file_path": "/tmp/tmpzbzdsqan/116_0/116_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "116_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.259, "last_ran_command_idx": 0, "command_runtimes": [26.224999999999998], "command_memory": [10264576], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "117", "lang": "Python", "code": "\ndef select_words(s, n):\n    result = []\n    for word in s.split():\n        n_consonants = 0\n        for i in range(0, len(word)):\n            if word[i].lower() not in [\"a\",\"e\",\"i\",\"o\",\"u\"]:\n                n_consonants += 1 \n        if n_consonants == n:\n            result.append(word)\n    return result\n\n", "file_path": "/tmp/tmpzbzdsqan/117_0/117_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "117_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.612, "last_ran_command_idx": 0, "command_runtimes": [25.579], "command_memory": [10309632], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "118", "lang": "Python", "code": "\ndef get_closest_vowel(word):\n    if len(word) < 3:\n        return \"\"\n\n    vowels = {\"a\", \"e\", \"i\", \"o\", \"u\", \"A\", \"E\", 'O', 'U', 'I'}\n    for i in range(len(word)-2, 0, -1):\n        if word[i] in vowels:\n            if (word[i+1] not in vowels) and (word[i-1] not in vowels):\n                return word[i]\n    return \"\"\n", "file_path": "/tmp/tmpzbzdsqan/118_0/118_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "118_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.447, "last_ran_command_idx": 0, "command_runtimes": [25.395], "command_memory": [10375168], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "119", "lang": "Python", "code": "\ndef match_parens(lst):\n    def check(s):\n        val = 0\n        for i in s:\n            if i == '(':\n                val = val + 1\n            else:\n                val = val - 1\n            if val < 0:\n                return False\n        return True if val == 0 else False\n\n    S1 = lst[0] + lst[1]\n    S2 = lst[1] + lst[0]\n    return 'Yes' if check(S1) or check(S2) else 'No'\n", "file_path": "/tmp/tmpzbzdsqan/119_0/119_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "119_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.008, "last_ran_command_idx": 0, "command_runtimes": [24.975], "command_memory": [10166272], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "120", "lang": "Python", "code": "def k_maximum_elements(arr, k):\n    if k == 0:\n        return []\n    arr.sort()\n    ans = arr[-k:]\n    return ans", "file_path": "/tmp/tmpzbzdsqan/120_0/120_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "120_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.019000000000002, "last_ran_command_idx": 0, "command_runtimes": [26.989], "command_memory": [10182656], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "121", "lang": "Python", "code": "def sum_odd_in_even_position(lst):\n    return sum([x for idx, x in enumerate(lst) if idx%2==0 and x%2==1])", "file_path": "/tmp/tmpzbzdsqan/121_0/121_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "121_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.573, "last_ran_command_idx": 0, "command_runtimes": [26.541], "command_memory": [10203136], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "122", "lang": "Python", "code": "\ndef add_elements(arr, k):\n    return sum(elem for elem in arr[:k] if len(str(elem)) <= 2)\n", "file_path": "/tmp/tmpzbzdsqan/122_0/122_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "122_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.433000000000003, "last_ran_command_idx": 0, "command_runtimes": [26.401], "command_memory": [10141696], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "123", "lang": "Python", "code": "\ndef get_odd_collatz(n):\n    if n%2==0:\n        odd_collatz = [] \n    else:\n        odd_collatz = [n]\n    while n > 1:\n        if n % 2 == 0:\n            n = n/2\n        else:\n            n = n*3 + 1\n            \n        if n%2 == 1:\n            odd_collatz.append(int(n))\n\n    return sorted(odd_collatz)\n", "file_path": "/tmp/tmpzbzdsqan/123_0/123_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "123_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.631999999999998, "last_ran_command_idx": 0, "command_runtimes": [25.599], "command_memory": [10395648], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "124", "lang": "Python", "code": "\ndef valid_date(date):\n    try:\n        date = date.strip()\n        month, day, year = date.split('-')\n        month, day, year = int(month), int(day), int(year)\n        if month < 1 or month > 12:\n            return False\n        if month in [1,3,5,7,8,10,12] and day < 1 or day > 31:\n            return False\n        if month in [4,6,9,11] and day < 1 or day > 30:\n            return False\n        if month == 2 and day < 1 or day > 29:\n            return False\n    except:\n        return False\n\n    return True\n", "file_path": "/tmp/tmpzbzdsqan/124_0/124_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "124_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\nTEST-13...PASSED\nTEST-14...PASSED\nTEST-15...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.609, "last_ran_command_idx": 0, "command_runtimes": [27.578], "command_memory": [10444800], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "125", "lang": "Python", "code": "def split_words(txt):\n    if \" \" in txt:\n        return txt.split()\n    elif \",\" in txt:\n        return txt.replace(',',' ').split()\n    else:\n        return [str(len([i for i in txt if i.islower() and ord(i)%2 == 0]))]", "file_path": "/tmp/tmpzbzdsqan/125_0/125_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "125_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.183, "last_ran_command_idx": 0, "command_runtimes": [27.151], "command_memory": [10088448], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "127", "lang": "Python", "code": "\ndef intersection(interval1, interval2):\n    def is_prime(num):\n        if num == 1 or num == 0:\n            return False\n        if num == 2:\n            return True\n        for i in range(2, num):\n            if num%i == 0:\n                return False\n        return True\n\n    l = max(interval1[0], interval2[0])\n    r = min(interval1[1], interval2[1])\n    length = r - l\n    if length > 0 and is_prime(length):\n        return \"YES\"\n    return \"NO\"\n", "file_path": "/tmp/tmpzbzdsqan/127_0/127_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "127_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.039, "last_ran_command_idx": 0, "command_runtimes": [27.008999999999997], "command_memory": [10412032], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "126", "lang": "Python", "code": "\ndef is_sorted(lst):\n    count_digit = dict([(i, 0) for i in lst])\n    for i in lst:\n        count_digit[i]+=1 \n    if any(count_digit[i] > 2 for i in lst):\n        return False\n    if all(lst[i-1] <= lst[i] for i in range(1, len(lst))):\n        return True\n    else:\n        return False\n    \n    \n", "file_path": "/tmp/tmpzbzdsqan/126_0/126_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "126_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.227, "last_ran_command_idx": 0, "command_runtimes": [27.2], "command_memory": [10489856], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "128", "lang": "Python", "code": "def prod_signs(arr):\n    prod = 0 if 0 in arr else (-1) ** len(list(filter(lambda x: x < 0, arr)))\n    return prod * sum([abs(i) for i in arr])", "file_path": "/tmp/tmpzbzdsqan/128_0/128_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "128_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.521, "last_ran_command_idx": 0, "command_runtimes": [26.488999999999997], "command_memory": [10313728], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "131", "lang": "Python", "code": "\ndef digits(n):\n    product = 1\n    odd_count = 0\n    for digit in str(n):\n        int_digit = int(digit)\n        if int_digit%2 == 1:\n            product= product*int_digit\n            odd_count+=1\n    if odd_count ==0:\n        return 0\n    else:\n        return product\n", "file_path": "/tmp/tmpzbzdsqan/131_0/131_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "131_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.619, "last_ran_command_idx": 0, "command_runtimes": [26.59], "command_memory": [10117120], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "130", "lang": "Python", "code": "\ndef tri(n):\n    if n == 0:\n        return [1]\n    my_tri = [1, 3]\n    for i in range(2, n + 1):\n        if i % 2 == 0:\n            my_tri.append(i / 2 + 1)\n        else:\n            my_tri.append(my_tri[i - 1] + my_tri[i - 2] + (i + 3) / 2)\n    return my_tri\n", "file_path": "/tmp/tmpzbzdsqan/130_0/130_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "130_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.184, "last_ran_command_idx": 0, "command_runtimes": [27.154999999999998], "command_memory": [10121216], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "129", "lang": "Python", "code": "\ndef min_path(grid, k):\n    n = len(grid)\n    val = n * n + 1\n    for i in range(n):\n        for j in range(n):\n            if grid[i][j] == 1:\n                temp = []\n                if i != 0:\n                    temp.append(grid[i - 1][j])\n\n                if j != 0:\n                    temp.append(grid[i][j - 1])\n\n                if i != n - 1:\n                    temp.append(grid[i + 1][j])\n\n                if j != n - 1:\n                    temp.append(grid[i][j + 1])\n\n                val = min(temp)\n\n    ans = []\n    for i in range(k):\n        if i % 2 == 0:\n            ans.append(1)\n        else:\n            ans.append(val)\n    return ans\n", "file_path": "/tmp/tmpzbzdsqan/129_0/129_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "129_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.233, "last_ran_command_idx": 0, "command_runtimes": [27.197], "command_memory": [10428416], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "132", "lang": "Python", "code": "\ndef is_nested(string):\n    opening_bracket_index = []\n    closing_bracket_index = []\n    for i in range(len(string)):\n        if string[i] == '[':\n            opening_bracket_index.append(i)\n        else:\n            closing_bracket_index.append(i)\n    closing_bracket_index.reverse()\n    cnt = 0\n    i = 0\n    l = len(closing_bracket_index)\n    for idx in opening_bracket_index:\n        if i < l and idx < closing_bracket_index[i]:\n            cnt += 1\n            i += 1\n    return cnt >= 2\n\n    \n", "file_path": "/tmp/tmpzbzdsqan/132_0/132_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "132_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\nTEST-13...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.342000000000002, "last_ran_command_idx": 0, "command_runtimes": [26.304000000000002], "command_memory": [10178560], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "135", "lang": "Python", "code": "\ndef can_arrange(arr):\n    ind=-1\n    i=1\n    while i<len(arr):\n      if arr[i]<arr[i-1]:\n        ind=i\n      i+=1\n    return ind\n", "file_path": "/tmp/tmpzbzdsqan/135_0/135_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "135_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.48, "last_ran_command_idx": 0, "command_runtimes": [25.447999999999997], "command_memory": [10387456], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "133", "lang": "Python", "code": "\n\ndef sum_squares(lst):\n    import math\n    squared = 0\n    for i in lst:\n        squared += math.ceil(i)**2\n    return squared\n", "file_path": "/tmp/tmpzbzdsqan/133_0/133_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "133_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.078, "last_ran_command_idx": 0, "command_runtimes": [26.047], "command_memory": [10235904], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "134", "lang": "Python", "code": "\ndef check_if_last_char_is_a_letter(txt):\n \n    check = txt.split(' ')[-1]\n    return True if len(check) == 1 and (97 <= ord(check.lower()) <= 122) else False\n", "file_path": "/tmp/tmpzbzdsqan/134_0/134_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "134_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.936, "last_ran_command_idx": 0, "command_runtimes": [25.903], "command_memory": [10219520], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "136", "lang": "Python", "code": "def largest_smallest_integers(lst):\n    smallest = list(filter(lambda x: x < 0, lst))\n    largest = list(filter(lambda x: x > 0, lst))\n    return [str(max(smallest)) if smallest else '', str(min(largest)) if largest else '']\n", "file_path": "/tmp/tmpzbzdsqan/136_0/136_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "136_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.858, "last_ran_command_idx": 0, "command_runtimes": [26.825000000000003], "command_memory": [10412032], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "138", "lang": "Python", "code": "\ndef is_equal_to_sum_even(n):\n    return n%2 == 0 and n >= 8\n", "file_path": "/tmp/tmpzbzdsqan/138_0/138_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "138_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.956, "last_ran_command_idx": 0, "command_runtimes": [26.926], "command_memory": [10035200], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "139", "lang": "Python", "code": "\ndef special_factorial(n):\n    fact_i = 1\n    special_fact = 1\n    for i in range(1, n+1):\n        fact_i *= i\n        special_fact *= fact_i\n    return special_fact\n", "file_path": "/tmp/tmpzbzdsqan/139_0/139_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "139_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.771, "last_ran_command_idx": 0, "command_runtimes": [26.74], "command_memory": [10235904], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "137", "lang": "Python", "code": "def compare_one(a, b):\n    temp_a = float(a.replace(',','.'))\n    temp_b = float(b.replace(',','.'))\n    if float(temp_a) == float(temp_b): return \"\"\n    return a if float(temp_a) > float(temp_b) else b ", "file_path": "/tmp/tmpzbzdsqan/137_0/137_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "137_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.326, "last_ran_command_idx": 0, "command_runtimes": [27.294], "command_memory": [10055680], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "142", "lang": "Python", "code": "\n\n\ndef sum_squares(lst):\n    result =[]\n    for i in range(len(lst)):\n        if i %3 == 0:\n            result.append(lst[i]**2)\n        elif i % 4 == 0 and i%3 != 0:\n            result.append(lst[i]**3)\n        else:\n            result.append(lst[i])\n    return sum(result)\n", "file_path": "/tmp/tmpzbzdsqan/142_0/142_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "142_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.026, "last_ran_command_idx": 0, "command_runtimes": [26.986], "command_memory": [10149888], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "143", "lang": "Python", "code": "\ndef words_in_sentence(sentence):\n    new_lst = []\n    for word in sentence.split():\n        flg = 0\n        if len(word) == 1:\n            flg = 1\n        for i in range(2, len(word)):\n            if len(word)%i == 0:\n                flg = 1\n        if flg == 0 or len(word) == 2:\n            new_lst.append(word)\n    return \" \".join(new_lst)\n", "file_path": "/tmp/tmpzbzdsqan/143_0/143_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "143_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.150000000000002, "last_ran_command_idx": 0, "command_runtimes": [27.119999999999997], "command_memory": [10280960], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "141", "lang": "Python", "code": "\ndef file_name_check(file_name):\n    suf = ['txt', 'exe', 'dll']\n    lst = file_name.split(sep='.')\n    if len(lst) != 2:\n        return 'No'\n    if not lst[1] in suf:\n        return 'No'\n    if len(lst[0]) == 0:\n        return 'No'\n    if not lst[0][0].isalpha():\n        return 'No'\n    t = len([x for x in lst[0] if x.isdigit()])\n    if t > 3:\n        return 'No'\n    return 'Yes'\n", "file_path": "/tmp/tmpzbzdsqan/141_0/141_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "141_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\nTEST-13...PASSED\nTEST-14...PASSED\nTEST-15...PASSED\nTEST-16...PASSED\nTEST-17...PASSED\nTEST-18...PASSED\nTEST-19...PASSED\nTEST-20...PASSED\nTEST-21...PASSED\nTEST-22...PASSED\nTEST-23...PASSED\nTEST-24...PASSED\nTEST-25...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.744999999999997, "last_ran_command_idx": 0, "command_runtimes": [27.709], "command_memory": [10207232], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "140", "lang": "Python", "code": "\ndef fix_spaces(text):\n    new_text = \"\"\n    i = 0\n    start, end = 0, 0\n    while i < len(text):\n        if text[i] == \" \":\n            end += 1\n        else:\n            if end - start > 2:\n                new_text += \"-\"+text[i]\n            elif end - start > 0:\n                new_text += \"_\"*(end - start)+text[i]\n            else:\n                new_text += text[i]\n            start, end = i+1, i+1\n        i+=1\n    if end - start > 2:\n        new_text += \"-\"\n    elif end - start > 0:\n        new_text += \"_\"\n    return new_text\n", "file_path": "/tmp/tmpzbzdsqan/140_0/140_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "140_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 35.053, "last_ran_command_idx": 0, "command_runtimes": [35.02], "command_memory": [10125312], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "146", "lang": "Python", "code": "\ndef special_filter(nums):\n    \n    count = 0\n    for num in nums:\n        if num > 10:\n            odd_digits = (1, 3, 5, 7, 9)\n            number_as_string = str(num)\n            if int(number_as_string[0]) in odd_digits and int(number_as_string[-1]) in odd_digits:\n                count += 1\n        \n    return count \n", "file_path": "/tmp/tmpzbzdsqan/146_0/146_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "146_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.294999999999998, "last_ran_command_idx": 0, "command_runtimes": [27.261], "command_memory": [10178560], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "145", "lang": "Python", "code": "\ndef order_by_points(nums):\n    def digits_sum(n):\n        neg = 1\n        if n < 0: n, neg = -1 * n, -1 \n        n = [int(i) for i in str(n)]\n        n[0] = n[0] * neg\n        return sum(n)\n    return sorted(nums, key=digits_sum)\n", "file_path": "/tmp/tmpzbzdsqan/145_0/145_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "145_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.593, "last_ran_command_idx": 0, "command_runtimes": [27.563000000000002], "command_memory": [10190848], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "144", "lang": "Python", "code": "\ndef simplify(x, n):\n    a, b = x.split(\"/\")\n    c, d = n.split(\"/\")\n    numerator = int(a) * int(c)\n    denom = int(b) * int(d)\n    if (numerator/denom == int(numerator/denom)):\n        return True\n    return False\n", "file_path": "/tmp/tmpzbzdsqan/144_0/144_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "144_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.769, "last_ran_command_idx": 0, "command_runtimes": [27.737000000000002], "command_memory": [10092544], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "148", "lang": "Python", "code": "def bf(planet1, planet2):\n    planet_names = (\"Mercury\", \"Venus\", \"Earth\", \"Mars\", \"Jupiter\", \"Saturn\", \"Uranus\", \"Neptune\")\n    if planet1 not in planet_names or planet2 not in planet_names or planet1 == planet2:\n        return []\n    planet1_index = planet_names.index(planet1)\n    planet2_index = planet_names.index(planet2)\n    if planet1_index < planet2_index:\n        return list(planet_names[planet1_index + 1: planet2_index])\n    else:\n        return list(planet_names[planet2_index + 1 : planet1_index])", "file_path": "/tmp/tmpzbzdsqan/148_0/148_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "148_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 27.887999999999998, "last_ran_command_idx": 0, "command_runtimes": [27.849], "command_memory": [10424320], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "149", "lang": "Python", "code": "\ndef sorted_list_sum(lst):\n    lst.sort()\n    new_lst = []\n    for i in lst:\n        if len(i)%2 == 0:\n            new_lst.append(i)\n    return sorted(new_lst, key=len)\n", "file_path": "/tmp/tmpzbzdsqan/149_0/149_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "149_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 28.202, "last_ran_command_idx": 0, "command_runtimes": [28.167], "command_memory": [10113024], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "150", "lang": "Python", "code": "\ndef x_or_y(n, x, y):\n    if n == 1:\n        return y\n    for i in range(2, n):\n        if n % i == 0:\n            return y\n            break\n    else:\n        return x\n", "file_path": "/tmp/tmpzbzdsqan/150_0/150_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "150_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 37.019000000000005, "last_ran_command_idx": 0, "command_runtimes": [36.99], "command_memory": [10366976], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "147", "lang": "Python", "code": "\ndef get_max_triples(n):\n    A = [i*i - i + 1 for i in range(1,n+1)]\n    ans = []\n    for i in range(n):\n        for j in range(i+1,n):\n            for k in range(j+1,n):\n                if (A[i]+A[j]+A[k])%3 == 0:\n                    ans += [(A[i],A[j],A[k])]\n    return len(ans)\n", "file_path": "/tmp/tmpzbzdsqan/147_0/147_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "147_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 60.066, "last_ran_command_idx": 0, "command_runtimes": [60.034], "command_memory": [14131200], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "151", "lang": "Python", "code": "def double_the_difference(lst):\n    out = 0\n    for i in lst:\n      try:\n        v = int(i)\n      except ValueError:\n        continue\n      if i <= 0 or i%2 == 0:\n        continue\n      out += v**2\n    return out\n", "file_path": "/tmp/tmpzbzdsqan/151_0/151_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "151_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.465, "last_ran_command_idx": 0, "command_runtimes": [26.433000000000003], "command_memory": [10072064], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "152", "lang": "Python", "code": "def compare_guess(game,guess):\n    return [abs(x-y) for x,y in zip(game,guess)]", "file_path": "/tmp/tmpzbzdsqan/152_0/152_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "152_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.082, "last_ran_command_idx": 0, "command_runtimes": [25.027], "command_memory": [10207232], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "153", "lang": "Python", "code": "\ndef strongest_extension(class_name, extensions):\n    strong = extensions[0]\n    my_val = len([x for x in extensions[0] if x.isalpha() and x.isupper()]) - len([x for x in extensions[0] if x.isalpha() and x.islower()])\n    for s in extensions:\n        val = len([x for x in s if x.isalpha() and x.isupper()]) - len([x for x in s if x.isalpha() and x.islower()])\n        if val > my_val:\n            strong = s\n            my_val = val\n\n    ans = class_name + \".\" + strong\n    return ans\n\n", "file_path": "/tmp/tmpzbzdsqan/153_0/153_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "153_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 24.9, "last_ran_command_idx": 0, "command_runtimes": [24.868000000000002], "command_memory": [10280960], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "154", "lang": "Python", "code": "\ndef cycpattern_check(a , b):\n    l = len(b)\n    pat = b + b\n    for i in range(len(a) - l + 1):\n        for j in range(l + 1):\n            if a[i:i+l] == pat[j:j+l]:\n                return True\n    return False\n", "file_path": "/tmp/tmpzbzdsqan/154_0/154_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "154_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.749000000000002, "last_ran_command_idx": 0, "command_runtimes": [25.695], "command_memory": [10088448], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "155", "lang": "Python", "code": "def even_odd_count(num):\n    even_count = 0\n    odd_count = 0\n    for i in str(abs(num)):\n        if int(i)%2==0:\n            even_count +=1\n        else:\n            odd_count +=1\n    return [even_count, odd_count]\n", "file_path": "/tmp/tmpzbzdsqan/155_0/155_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "155_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.179, "last_ran_command_idx": 0, "command_runtimes": [25.147], "command_memory": [10113024], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "156", "lang": "Python", "code": "\ndef int_to_mini_roman(number):\n    num = [1, 4, 5, 9, 10, 40, 50, 90,  \n           100, 400, 500, 900, 1000] \n    sym = [\"I\", \"IV\", \"V\", \"IX\", \"X\", \"XL\",  \n           \"L\", \"XC\", \"C\", \"CD\", \"D\", \"CM\", \"M\"] \n    i = 12\n    res = ''\n    while number: \n        div = number // num[i] \n        number %= num[i] \n        while div: \n            res += sym[i] \n            div -= 1\n        i -= 1\n    return res.lower()\n", "file_path": "/tmp/tmpzbzdsqan/156_0/156_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "156_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\nTEST-11...PASSED\nTEST-12...PASSED\nTEST-13...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.183, "last_ran_command_idx": 0, "command_runtimes": [25.133], "command_memory": [10403840], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "158", "lang": "Python", "code": "\ndef find_max(words):\n    return sorted(words, key = lambda x: (-len(set(x)), x))[0]\n", "file_path": "/tmp/tmpzbzdsqan/158_0/158_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "158_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.32, "last_ran_command_idx": 0, "command_runtimes": [25.267999999999997], "command_memory": [10412032], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "157", "lang": "Python", "code": "\ndef right_angle_triangle(a, b, c):\n    return a*a == b*b + c*c or b*b == a*a + c*c or c*c == a*a + b*b\n", "file_path": "/tmp/tmpzbzdsqan/157_0/157_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "157_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\nTEST-8...PASSED\nTEST-9...PASSED\nTEST-10...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.714000000000002, "last_ran_command_idx": 0, "command_runtimes": [25.680999999999997], "command_memory": [10059776], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "159", "lang": "Python", "code": "\ndef eat(number, need, remaining):\n    if(need <= remaining):\n        return [ number + need , remaining-need ]\n    else:\n        return [ number + remaining , 0]\n", "file_path": "/tmp/tmpzbzdsqan/159_0/159_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "159_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.485000000000003, "last_ran_command_idx": 0, "command_runtimes": [26.453999999999997], "command_memory": [10215424], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "160", "lang": "Python", "code": "\ndef do_algebra(operator, operand):\n    expression = str(operand[0])\n    for oprt, oprn in zip(operator, operand[1:]):\n        expression+= oprt + str(oprn)\n    return eval(expression)\n", "file_path": "/tmp/tmpzbzdsqan/160_0/160_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "160_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.77, "last_ran_command_idx": 0, "command_runtimes": [25.74], "command_memory": [10018816], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "161", "lang": "Python", "code": "\ndef solve(s):\n    flg = 0\n    idx = 0\n    new_str = list(s)\n    for i in s:\n        if i.isalpha():\n            new_str[idx] = i.swapcase()\n            flg = 1\n        idx += 1\n    s = \"\"\n    for i in new_str:\n        s += i\n    if flg == 0:\n        return s[len(s)::-1]\n    return s\n", "file_path": "/tmp/tmpzbzdsqan/161_0/161_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "161_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\nTEST-4...PASSED\nTEST-5...PASSED\nTEST-6...PASSED\nTEST-7...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.342, "last_ran_command_idx": 0, "command_runtimes": [25.312], "command_memory": [10117120], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "162", "lang": "Python", "code": "def string_to_md5(text):\n    import hashlib\n    return hashlib.md5(text.encode('ascii')).hexdigest() if text else ''", "file_path": "/tmp/tmpzbzdsqan/162_0/162_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "162_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 26.022, "last_ran_command_idx": 0, "command_runtimes": [25.995], "command_memory": [12193792], "had_error": false, "timed_out": false, "all_commands_ran": true}
{"id": "0", "qid": "163", "lang": "Python", "code": "\ndef generate_integers(a, b):\n    lower = max(2, min(a, b))\n    upper = min(8, max(a, b))\n\n    return [i for i in range(lower, upper+1) if i % 2 == 0]\n", "file_path": "/tmp/tmpzbzdsqan/163_0/163_0.py", "entry_fn_name": null, "entry_cls_name": null, "commands": [{"command": ["python", "163_0.py"], "timeout": 10}], "stdout": "TEST-0...PASSED\nTEST-1...PASSED\nTEST-2...PASSED\nTEST-3...PASSED\n", "stderr": "", "return_code": 0, "net_runtime": 25.343999999999998, "last_ran_command_idx": 0, "command_runtimes": [25.319000000000003], "command_memory": [10338304], "had_error": false, "timed_out": false, "all_commands_ran": true}
